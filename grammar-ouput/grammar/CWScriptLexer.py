# Generated from grammar/CWScript.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,292,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,5,1,110,8,1,10,1,12,1,113,9,1,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,
        22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,
        37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
        42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
        45,1,45,1,45,1,46,1,46,1,46,1,47,4,47,273,8,47,11,47,12,47,274,1,
        48,1,48,5,48,279,8,48,10,48,12,48,282,9,48,1,48,1,48,1,49,1,49,5,
        49,288,8,49,10,49,12,49,291,9,49,0,0,50,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,1,
        0,6,3,0,9,10,13,13,32,32,3,0,10,10,13,13,8232,8233,1,0,48,57,1,0,
        34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,295,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,
        1,0,0,0,3,105,1,0,0,0,5,116,1,0,0,0,7,118,1,0,0,0,9,120,1,0,0,0,
        11,122,1,0,0,0,13,124,1,0,0,0,15,126,1,0,0,0,17,128,1,0,0,0,19,130,
        1,0,0,0,21,133,1,0,0,0,23,135,1,0,0,0,25,138,1,0,0,0,27,141,1,0,
        0,0,29,143,1,0,0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,149,1,0,0,0,
        37,151,1,0,0,0,39,153,1,0,0,0,41,155,1,0,0,0,43,157,1,0,0,0,45,160,
        1,0,0,0,47,163,1,0,0,0,49,165,1,0,0,0,51,167,1,0,0,0,53,169,1,0,
        0,0,55,171,1,0,0,0,57,173,1,0,0,0,59,175,1,0,0,0,61,177,1,0,0,0,
        63,186,1,0,0,0,65,190,1,0,0,0,67,202,1,0,0,0,69,210,1,0,0,0,71,215,
        1,0,0,0,73,221,1,0,0,0,75,225,1,0,0,0,77,228,1,0,0,0,79,231,1,0,
        0,0,81,236,1,0,0,0,83,243,1,0,0,0,85,249,1,0,0,0,87,254,1,0,0,0,
        89,257,1,0,0,0,91,262,1,0,0,0,93,268,1,0,0,0,95,272,1,0,0,0,97,276,
        1,0,0,0,99,285,1,0,0,0,101,102,7,0,0,0,102,103,1,0,0,0,103,104,6,
        0,0,0,104,2,1,0,0,0,105,106,5,47,0,0,106,107,5,47,0,0,107,111,1,
        0,0,0,108,110,8,1,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,
        0,0,0,111,112,1,0,0,0,112,114,1,0,0,0,113,111,1,0,0,0,114,115,6,
        1,1,0,115,4,1,0,0,0,116,117,5,40,0,0,117,6,1,0,0,0,118,119,5,41,
        0,0,119,8,1,0,0,0,120,121,5,123,0,0,121,10,1,0,0,0,122,123,5,125,
        0,0,123,12,1,0,0,0,124,125,5,91,0,0,125,14,1,0,0,0,126,127,5,93,
        0,0,127,16,1,0,0,0,128,129,5,44,0,0,129,18,1,0,0,0,130,131,5,58,
        0,0,131,132,5,58,0,0,132,20,1,0,0,0,133,134,5,58,0,0,134,22,1,0,
        0,0,135,136,5,61,0,0,136,137,5,61,0,0,137,24,1,0,0,0,138,139,5,33,
        0,0,139,140,5,61,0,0,140,26,1,0,0,0,141,142,5,61,0,0,142,28,1,0,
        0,0,143,144,5,46,0,0,144,30,1,0,0,0,145,146,5,63,0,0,146,32,1,0,
        0,0,147,148,5,33,0,0,148,34,1,0,0,0,149,150,5,34,0,0,150,36,1,0,
        0,0,151,152,5,39,0,0,152,38,1,0,0,0,153,154,5,96,0,0,154,40,1,0,
        0,0,155,156,5,36,0,0,156,42,1,0,0,0,157,158,5,45,0,0,158,159,5,62,
        0,0,159,44,1,0,0,0,160,161,5,63,0,0,161,162,5,63,0,0,162,46,1,0,
        0,0,163,164,5,43,0,0,164,48,1,0,0,0,165,166,5,45,0,0,166,50,1,0,
        0,0,167,168,5,42,0,0,168,52,1,0,0,0,169,170,5,47,0,0,170,54,1,0,
        0,0,171,172,5,37,0,0,172,56,1,0,0,0,173,174,5,60,0,0,174,58,1,0,
        0,0,175,176,5,62,0,0,176,60,1,0,0,0,177,178,5,99,0,0,178,179,5,111,
        0,0,179,180,5,110,0,0,180,181,5,116,0,0,181,182,5,114,0,0,182,183,
        5,97,0,0,183,184,5,99,0,0,184,185,5,116,0,0,185,62,1,0,0,0,186,187,
        5,108,0,0,187,188,5,111,0,0,188,189,5,103,0,0,189,64,1,0,0,0,190,
        191,5,105,0,0,191,192,5,110,0,0,192,193,5,115,0,0,193,194,5,116,
        0,0,194,195,5,97,0,0,195,196,5,110,0,0,196,197,5,116,0,0,197,198,
        5,105,0,0,198,199,5,97,0,0,199,200,5,116,0,0,200,201,5,101,0,0,201,
        66,1,0,0,0,202,203,5,109,0,0,203,204,5,105,0,0,204,205,5,103,0,0,
        205,206,5,114,0,0,206,207,5,97,0,0,207,208,5,116,0,0,208,209,5,101,
        0,0,209,68,1,0,0,0,210,211,5,101,0,0,211,212,5,120,0,0,212,213,5,
        101,0,0,213,214,5,99,0,0,214,70,1,0,0,0,215,216,5,113,0,0,216,217,
        5,117,0,0,217,218,5,101,0,0,218,219,5,114,0,0,219,220,5,121,0,0,
        220,72,1,0,0,0,221,222,5,108,0,0,222,223,5,101,0,0,223,224,5,116,
        0,0,224,74,1,0,0,0,225,226,5,105,0,0,226,227,5,102,0,0,227,76,1,
        0,0,0,228,229,5,105,0,0,229,230,5,115,0,0,230,78,1,0,0,0,231,232,
        5,101,0,0,232,233,5,108,0,0,233,234,5,115,0,0,234,235,5,101,0,0,
        235,80,1,0,0,0,236,237,5,114,0,0,237,238,5,101,0,0,238,239,5,116,
        0,0,239,240,5,117,0,0,240,241,5,114,0,0,241,242,5,110,0,0,242,82,
        1,0,0,0,243,244,5,115,0,0,244,245,5,116,0,0,245,246,5,97,0,0,246,
        247,5,116,0,0,247,248,5,101,0,0,248,84,1,0,0,0,249,250,5,102,0,0,
        250,251,5,97,0,0,251,252,5,105,0,0,252,253,5,108,0,0,253,86,1,0,
        0,0,254,255,5,102,0,0,255,256,5,110,0,0,256,88,1,0,0,0,257,258,5,
        115,0,0,258,259,5,101,0,0,259,260,5,110,0,0,260,261,5,100,0,0,261,
        90,1,0,0,0,262,263,5,114,0,0,263,264,5,101,0,0,264,265,5,112,0,0,
        265,266,5,108,0,0,266,267,5,121,0,0,267,92,1,0,0,0,268,269,5,111,
        0,0,269,270,5,110,0,0,270,94,1,0,0,0,271,273,7,2,0,0,272,271,1,0,
        0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,96,1,0,0,
        0,276,280,5,34,0,0,277,279,8,3,0,0,278,277,1,0,0,0,279,282,1,0,0,
        0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,
        0,283,284,5,34,0,0,284,98,1,0,0,0,285,289,7,4,0,0,286,288,7,5,0,
        0,287,286,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,
        0,290,100,1,0,0,0,291,289,1,0,0,0,5,0,111,274,280,289,2,0,1,0,6,
        0,0
    ]

class CWScriptLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WS = 1
    COMMENT = 2
    LPAREN = 3
    RPAREN = 4
    LBRACE = 5
    RBRACE = 6
    LBRACK = 7
    RBRACK = 8
    COMMA = 9
    D_COLON = 10
    COLON = 11
    EQ_EQ = 12
    NEQ = 13
    EQ = 14
    DOT = 15
    QUESTION = 16
    BANG = 17
    D_QUOTE = 18
    QUOTE = 19
    BACKTICK = 20
    DOLLAR = 21
    ARROW = 22
    D_QUE = 23
    PLUS = 24
    MINUS = 25
    MULT = 26
    DIV = 27
    MOD = 28
    LT = 29
    GT = 30
    CONTRACT = 31
    LOG = 32
    INSTANTIATE = 33
    MIGRATE = 34
    EXEC = 35
    QUERY = 36
    LET = 37
    IF = 38
    IS = 39
    ELSE = 40
    RETURN = 41
    STATE = 42
    FAIL = 43
    FN = 44
    SEND = 45
    REPLY = 46
    ON = 47
    NumLiteral = 48
    StrLiteral = 49
    Ident = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'::'", "':'", 
            "'=='", "'!='", "'='", "'.'", "'?'", "'!'", "'\"'", "'''", "'`'", 
            "'$'", "'->'", "'??'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", 
            "'>'", "'contract'", "'log'", "'instantiate'", "'migrate'", 
            "'exec'", "'query'", "'let'", "'if'", "'is'", "'else'", "'return'", 
            "'state'", "'fail'", "'fn'", "'send'", "'reply'", "'on'" ]

    symbolicNames = [ "<INVALID>",
            "WS", "COMMENT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", 
            "RBRACK", "COMMA", "D_COLON", "COLON", "EQ_EQ", "NEQ", "EQ", 
            "DOT", "QUESTION", "BANG", "D_QUOTE", "QUOTE", "BACKTICK", "DOLLAR", 
            "ARROW", "D_QUE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "LT", 
            "GT", "CONTRACT", "LOG", "INSTANTIATE", "MIGRATE", "EXEC", "QUERY", 
            "LET", "IF", "IS", "ELSE", "RETURN", "STATE", "FAIL", "FN", 
            "SEND", "REPLY", "ON", "NumLiteral", "StrLiteral", "Ident" ]

    ruleNames = [ "WS", "COMMENT", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
                  "LBRACK", "RBRACK", "COMMA", "D_COLON", "COLON", "EQ_EQ", 
                  "NEQ", "EQ", "DOT", "QUESTION", "BANG", "D_QUOTE", "QUOTE", 
                  "BACKTICK", "DOLLAR", "ARROW", "D_QUE", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "LT", "GT", "CONTRACT", "LOG", "INSTANTIATE", 
                  "MIGRATE", "EXEC", "QUERY", "LET", "IF", "IS", "ELSE", 
                  "RETURN", "STATE", "FAIL", "FN", "SEND", "REPLY", "ON", 
                  "NumLiteral", "StrLiteral", "Ident" ]

    grammarFileName = "CWScript.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


